이후 작업 순서

1. 요청설계 작성
2. 컨트롤러를 제작하고
3. 요청매핑하고
4. 뷰를 제작하고
5. 질의명령 작성하고
6. dao 함수 제작하고
7. 컨트롤러 완성하고

-------------------------------------------------------------------

커넥션 풀(Connection Pool)
==> 데이터베이스에 접속하는 커넥션을 모아놓은 것
	
	웹 서버(톰캣)이 시작될 때 데이터베이스가 제공하는 모든 커넥션(약간 적은)을
	미리 확보해놓은 후 필요할 때 확보해놓은 커넥션을 톰캣이 제공하는 방법
	
	따라서 요청할 때마다 다시 데이터베이스에 접속하는 상황은 발생하지 않고
	좀 더 빠르게 데이터베이스 작업을 할 수 있게 됨
	
	필요한 이유
		데이터베이스를 사용할 때 가장 시간이 많이 걸리고
		서버에게 부담을 많이 주는 작업이 데이터베이스에 접속하는 작업
		따라서 접속과 단절이 빈번하면 그만큼 시스템은 많은 시간과 자원을 소모하게 됨
		
		예를 들어 우리가 어떤 홈페이지에 접속했을 때
		가끔 응답 속도가 느린 경우
		대부분의 이유는 90% 정도가 데이터베이스 작업에서 문제가 생겼기 때문
		
		하지만 우리가 지금까지 공부한 방법은
		누군가 요청하면 그 순간에 데이터베이스에 접속해서
		작업한 후 다시 닫는 방식으로 작업을 진행했었음
		
		따라서 많은 접속자가 있는 경우에는 문제가 발생할 수 있음
		
-------------------------------------------------------------------

커넥션 풀을 웹 서버에 등록하는 방법

	0. 먼저 커넥션 풀 작업을 지원하는 라이브러리가 필요함
	
		주의 ]
		
			과거에는 커넥션 풀을 위한 라이브러리가 독립되어서 제공되었는데
			버전 1.6 버전 이상부터는 jdbc 라이브러리와 통합되어서 제공되고 있음
			만약 이전 버전을 사용한다면
				commons.dbcp-x.x.jar
				commons.pool-x.x.jar
			를 구해서 설치해야 함
			
환경설정 파일에 커넥션 풀을 지정함

	1. server.xml에 등록하는 방법
		
		<GlobalNamingResource>
			이 부분에 설정을 기술함
		</GlobalNamingResource>
		
	2. context.xml에 등록하는 방법
		
		context.xml 파일이 하는 일
		==> JSP(컨트롤러 포함)에서 사용할 자원을
			등록하는 역할을 담당하는 설정 파일
			
			<Resource
				name="jdbc/TestDB"
				==> JSP에서 이 자원(커넥션 풀)을 사용할 때 구분할 이름
				autho="Container"
				==> 등록된 자원을 관리하는 객체이름
					반드시 "Container"라고 기술해야 함
				type="javax.sql.DataSource"
				==> 등록할 자원을 관리할 클래스이름
					커넥션 풀은 javax.sql.DataSource가 관리함
				maxTotal="8"
				==> 최대 확보할 커넥션 수
				maxIdle="2"
				==> 최소한 남겨놓아야 할 응급 커넥션 수
				maxWaitMillis="10000"
				==> 누군가 요청했을 때 커넥션이 부족하면 대기를 해야하는데,
					그 대기시간을 설정하는 속성
				username="jennie"
				password="12345"
				driverClassName="oracle.jdbc.driver.OracleDriver"
				url="jdbc:oracle:thin:@localhost:1521:xe"
			/>
	
	