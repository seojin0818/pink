# jsp02

JSP 구조
	
	JSP는 응답 문서(대부분이 HTML 문서)를 만들기 위한 언어의 일종
	
	따라서 HTML 코드가 중심이 되고
	그 중에 필요한 경우에 한해서 자바 코드가 삽입될 수 있음
	결론적으로 JSP는 자바적인 요소를 포함할 수 있는 스크립트 언어
	
	HTML과의 차이점
		HTML은 서버 측에서 실행 불가능하고
		오직 클라이언트(웹 브라우저)에서 실행이 가능한 언어
	==> 오직 미리 준비된 문서를 단순히 응답하는 것일 뿐 변화를 줄 수는 없음
	
	JSP는 서버 측에서만 실행할 수 있는 언어
	==> 요청이 올 때마다 서버 측에서 실행해서
		요청에 맞는 새로운 HTML 문서를 제작할 수 있음
		요청이 올 때마다 내용 변화를 시킬 수 있음
		
JSP 구조에서 반드시 알아야할 내용
==> 자바 소스코드를 어떤 방식으로 HTML 문서에 포함시킬 것인가?

---------------------------------------------------------------------------------------

지시자
==> JSP 문서의 특성이나 처리방식을 지시하는 명령

	형식 ]
		
		<%@ 명령어 속성="속성값"	속성="속성값" %>
		
		명령어의 종류 ]
		
			page		: 문서 자체의 특성이나 처리방식을 지시하는 명령
			include		: 문서 안에 다른 문서를 포함하도록 지시하는 명령
			taglib		: 사용자가 제작한 태그를 사용할 수 있도록 선언하는 명령
			
참고 ]

	JSP 문서에서의 주석 처리
	
	==> 다중행 주석으로 처리
	
		형식 ]
		
			<%--	--%>
			
	1. page 명령
		==> 현재 작업중인 문서 자체에 특성이나 처리방식을 지시하는 명령
		
			형식 ]
			
				<%@ page 속성="속성값" 속성="속성값" ... %>
				
			참고 ]
				
				속성 : 지정하고 싶은 특성이나 처리방식에 대한 예약된 단어
				
				속성값 : 속성에 해당하는 특성이나 처리방식에 대한 내용
			
			속성의 종류 ]
				*
				language
				==> 스크립트할 언어의 종류를 지정하는 속성
					지금까지는 오직 자바만 허락한 상태
					생략하면 자동으로 자바를 스크립트해줌
					
					예 ]
					
						<%@ page language="java" %>
						
				extends
				==> JSP는 실행을 하면 내부적으로 자바 클래스로 변환되어서 실행되도록 되어있음
					즉, 중간 단계의 언어로 바뀐 상태에서 실행을 하므로
					ASP, PHP보다 실행속도가 빠른 장점을 가지고 있음
					
					이 때 중간에서 만들어지는 클래스가 어떤 클래스를 상속 받아서 만들어져야 하는지를 지정하는 속성
					
					이미 JSP 문서가 클래스로 변환될 때 HttpJspBase 라는 클래스를 상속 받도록 약속
					자바는 다중상속이 불가능하므로 필요없는 속성
					생략하면 자동적으로 HttpJspBase 클래스를 상속 받아줌
					
					예 ]
					
						<%@ page extends="javax.servlet.jsp.HttpJspBase" %>
						
				*
				import
					==> 스크립트 안에 자바적인 요소를 넣을 수 있는데
						이 때 사용하는 자바적인 요소가 특정 패키지 소속이면
						자바와 동일하게 반드시 import 시켜야 함
						그 작업을 해주는 속성
						
					예 ]
					
						<%@ page import="java.util.*, java.io.*" %>
						
				session
					==> 세션의 사용 여부를 판단하도록 하는 속성
						생략하면 세션을 사용하도록 함 (기본값이 true)
					
					예 ]
					
						<%@ page session="true" %>
						
					참고 ]
						
						세션 : 사용자의 정보를 서버측에서 관리할 때 메모리상에서 관리하도록 하고 있음
								서버에서 메모리에서 관리하는 사용자 정보를 세션이라고 함
						
						쿠키 : 클라이언트 측에서 서버의 정보, 자신의 활동내역 등을 사용자 측의 컴퓨터 파일로 저장해서 관리
								이 때 저장된 임시파일을 쿠키라고 함
						
				buffer
					==> 내부적으로 버퍼를 사용할지 여부와
						버퍼의 크기를 얼마로 할지 여부를 지정하는 속성
						생략하면 기본적으로 8KByte를 버퍼로 사용함
					
					예 ]
					
						<%@ page buffer="none" %>
						==> 버퍼를 사용하지 않겠다는 의미
						
						<%@ page buffer="16K" %>
						==> 버퍼의 크기를 16KByte로 지정해서 사용하겠다는 의미
					
					참고 ]
					
						버퍼 :
							클라이언트에서 서버가 응답을 할 때 처리 속도를 빠르게 하기 위해서
							중간에 버퍼를 사용해서
							데이터를 모았다가 한번에 출력하는 개념
							
				autoFlush
					==> 자동 Flush 기능을 사용할지 여부를 판단하는 속성
						생략하면 true가 지정되어서 자동 flush 기능 적용
						
					예 ]
					
						<%@ page autoFlush="true" %>
					
					참고 ]
					
						만약 false로 지정하면
						강제로 반드시 flush 시켜줘야 함
						
				isThreadSafe
					==> 스레드 처리를 할 때 동기화 처리 여부를 정하는 속성
						생략하면 자동 동기화 처리를 하도록 함
					
					예 ]
					
						<%@ page isThreadSafe="true" %>
					
					참고 ]
					
						JSP의 모든 문서는 자동 스레드 처리 됨
						즉, 여러 클라이언트가 동시에 접속을 하더라도
						스레드 처리를 해서 응답하도록 되어있음
						
				*
				info
					==> 주석문에 해당하는 것으로
						실행에는 아무런 상관이 없고
						다만 문서에 대한 정보(주석)를 달고 싶을 때 사용하는 속성
						
					예 ]
					
						<%@ page info="pink 프로젝트 jsp 파일" %>
						
				*
				errorPage
					==> JSP 문서를 실행하는 도중 문제(Exception)이 발생하면
						그 문서로 응답할 수 없게 됨
						따라서 대신 응답할 다른 문서를 지정하는 속성
						
					예 ]
						
						<%@ page errorPage="pinkError.jsp" %>
						==> 에러가 발생하면 이 문서 대신 pinkError.jsp로 클라이언트에게 응답하라는 의미
						
				*
				isErrorPage
					==> 지금 만들고 있는 문서가 에러 페이지용 문서인지를 지정하는 속성
					
					예 ]
					
						<%@ page isErrorPage="true" %>
						
				*
				contentType
					==> 실행 결과의 응답 방식을 지정하는 속성
					
					참고 ]
					
						실행결과 탄생하는 문서의 종류를 지정할 수 있음
						이 때 응답 문서의 종류는 MIME TYPE으로 지정해야 함
						
					예 ]
						
						<%@ page contentType="text/html" %>
						==> 응답 문서의 종류를 html 문서로 만들어달라는 의미
						
					참고 ]
					
						이 속성에는 인코딩 방식도 같이 지정할 수 있음
						
						형식 ]
							
							<%@ page contentType="mimeType; charset=UTF-8" %>
					
					참고 ]
						
						이 속성은 매우 중요한 속성으로
						생략하면 일반 txt 파일로 응답하게 됨
						따라서 거의 반드시 지정해야 하는 유일한 속성
						
				*
				pageEncoding
					==> 문서의 인코딩 방식을 지정하는 속성
					
					예 ]
						
						<%@ page pageEncoding="UTF-8" %>
						
					참고 ]
					
						contentType에서 문서의 인코딩 방식을 같이 지정할 수 있으므로 생략해도 무방함
				

	2. include
		==> 다른 문서를 현재 파일에 포함시키는 기능을 가진 지시어
			따라서 하나의 파일로 만드는 기능
			
		형식 ]
		
			<%@ include file="합칠파일이름" %>
			
		참고 ]
			
			우리가 웹 문서를 만들다보면 여러 페이지에 같은 내용이
			중복되어서 추가되는 경우가 많이 있음
			
			하지만 원칙적으로 JSP 문서가 만든 결과를 응답하기 때문에
			(응답 문서는 하나로 만들어져야 함)
			매 문서마다 동일한 내용이라도 다시 작성해야 함
			
			이런 불편함을 덜기 위한 방법으로 제시된 지시어
			
		결론적으로
			자주 사용하는 내용은 따로 만들어놓고
			응답 문서에 따로 만들어진 파일을 합쳐서 하나의 문서로 만드는 방법
			
		***
		이 작업은 먼저 코드를 합치고(하나의 문서로 만들고) 컴파일 함
		만약 먼저 합쳤을 때 문제가 발생하면(충돌이 나면) 에러 발생
		
---------------------------------------------------------------------------------------

JSP 코드 작성(스크립트) 방식
==> JSP는 HTML 언어가 기본이 되고
	필요하면 자바 언어를 필요한 위치에 삽입하여 같이 실행하는 문서
	
	참고 ]
	
	JSP 문서 실행 순서
	
	요청 - 자바 class 파일로 변환 - 컴파일(.class) - 톰캣이 실행 -
	실행 결과 만들어진 HTML 소스코드를 클라이언트에게 전송
	
	이처럼 다른 언어에 포함하여 처리하는 방식을
	스크립트 방식이라고 하며
	JSP 문서에 자바 언어를 삽입하는 방식은 3가지가 있음
	 	
	1. 스크립트 릿 방식
		==> 일반적인 자바 언어를 포함하는 방식을 의미
			이 곳에 기록한 모든 내용은 service 함수 내에 포함되므로
			결국 이 곳은 지역적인 역할을 하게 됨
			
		참고 ]
			
			JSP 문서는 여러 문서가 같이 실행되는  것이 아니고
			클라이언트가 요청한 문서 하나만 실행되므로
			클래스가 연결되어서 실행되는 경우는 거의 없음
			따라서 main 함수만 있으면 충분히 그 역할을 수행할 수 있음
			
		참고 ]
			
			JSP 문서는 실행을 하면 먼저 자바 클래스로 변환하고
			그것을 실행하는 방식
			이런 클래스를 우리는 서블릿 클래스라고 부름
			이 때 이것 역시 자바의 main 함수처럼 시작함수가 존재하는데
			그 함수 이름이 service 함수
			
		형식 ]
		
			<%
				자바 코딩
			%>
			
		참고 ]
		
			스크립트 릿 속에 있는 내용과 HTML적인 내용은
			같이 service 함수에 코딩이 됨
			따라서 두가지는 혼용해서 사용할 수 있음
			다만 자바적인 요소와 HTML 요소만 구분해주면 됨
			
	2. 선언자 방식
		==> JSP는 service 함수 안에서 거의 모든것이 실행
			하지만 가끔은 전역변수나 함수가 필요한 경우가 발생하면
			전역변수와 함수를 만드는 방법이 필요할 것이고
			이 때 사용되는 방식이 선언자 방식
			
			결론적으로
				전역변수와 함수를 만드는 기능을 가진 스크립트 방식
				(이 안에는 일반적인 명령은 사용할 수 없음)
				
		형식 ]
		
			<%!
				변수선언
				함수제작
			%>
				
	3. 표현자 방식
		==> 자바에서의 System.out.println()처럼
			자바적인 요소(변수, 함수)를 화면에 내용을 출력하기 위한 스크립트
			
		형식 ]
			
			<%= 출력내용 %>
			
		주의사항 ]
		
			출력내용은 오직 한개만 출력할 수 있음
			이것은 System.out.println()도 마찬가지
			==> 문자열 결합을 이용해서
				하나의 문자열로 만들어서
				출력하는 방식을 사용해야 함
				
정리 ]

	주석문
		1. 확장자가 html, htm인 문서
			
			<!-- -->
			
		2. 자바스크립트 문서
		
			// 단일행 주석
			/* */ 다중행 주석
			
		3. jsp 문서에서의 주석
		
			1) html 요소 부분
				<%-- --%>
			
			2) 스크립트 릿 방식의 코드 내
				//
				/* */
		
---------------------------------------------------------------------------------------

내장객체
==> 자주 사용하는 클래스 중 몇가지는 JSP 안에서 미리 new 시켜서
	사용할 수 있도록 준비를 해놓은 것이 있음
	따라서 이것은 new 시킬 필요 없이
	필요할 때 사용할 수 있는 클래스를 내장객체라고 부름
	
	1. out 객체
		==> PrintWriter 클래스를 미리 new 시켜놓은 내장객체
		
			즉,
				PrintWriter out = new PrintWriter();
				
			이 클래스의 역할은 클라이언트에게 응답하는 문서를 작성하도록 하는 기능
			
			<%= %>과 동일한 기능
			
			주요함수
				write()
				flush()
				
			참고 ]
				
				PrintWriter는 JSPWriter 클래스로 변환되어서 new 된 경우
				
참고 ]

	따라서 내장객체는 결국 클래스를 사용하는 것
	그 클래스 안에 원하는 함수가 무엇인지를 파악하는 것이 중요함
	
	*		
	2. request 객체
		==> 클라이언트의 요청 정보를 관리하는 역할을 하는 내장 객체
			즉, 요청한 클라이언트의 IP 주소, 요청내용, 부가정보를
			알고 싶은 경우 사용하는 내장객체
			
			HttpServletRequest를 이용해서 만들어진 내장객체
			
		주요함수 ]
		
			getParameter()
			==> 서버 측에서 클라이언트가 준 부가 정보를 알아내는 함수
			
				형식 ]
					
					String ??? = request.getParameter("키값");
					
				주의 ]
				
					부가정보는 오직 String으로만 받을 수 있음
					
				***
				주의 ]
				
					부가정보를 세팅하는 함수는 존재하지 않음
					
			getParameterValues()
				
				형식 ]
					
					String[] ??? = request.getParameterValues("키값");
					
참고 ]

	클라이언트가 서버에게 요청하는 방법
	
		1. GET
			1) 주소표시줄에 입력해서 요청하는 방법
			2) a 태그를 이용해서 요청하는 방법
			3) 자바스크립트의 location 객체의 href 속성을 정의하면서 요청하는 방법
				==>
					location.href = '요청주소?키값=데이터&키값=데이터...';
			4) form 태그의 method 속성은 GET으로 하고 action 속성에 요청 주소를 입력해서 요청하는 방법
			
			참고 ]
			
				GET 방식으로 요청할 때 부가 정보를 같이 줄 수 있음
				예를 들어 게시판 목록보기를 할 때
				몇페이지를 보여달라는 요청은
				
				형식 ]
				
					<a href="요청할 문서?키값=데이터&키값=데이터...">내용</a>
					
				주의 ]
				
					?, =, & 앞뒤에는 절대로 공백이 있어서는 안 됨
					
			참고 ]
				
				GET 방식은 요청 내용이 주소표시줄에 나타나기 때문에 보안에 취약한 문제점이 있음
				
			주의 ]
				
				부가정보에 한글이 들어가면
				서버측에서 받을 수 없는 경우 발생
				한글이 깨져서 나오는 경우
				==> 해결방법 ]
						1. 해당 문서에서만 해결하는 방법
							<%
								request.(setCharacterEncoding"UTF-8");
							%>
						2. 모든 문서에서 해결하는 방법
							server.xml 파일의
							<Connector 태그 마지막 부분에
								URIEncoding="UTF-8"
							을 추가해주면 됨
				
		2. POST
			1. form을 제작해서 요청하는 방법
				==> 로그인 폼과 같이 사용자가 필요한 것을 입력
					또는 선택해서 서버에게 전달하는 방식
					
				***
				특징 ]
					
					반드시 <form> 태그 안에 입력태그를 만들어야 하고
					만약 어떤 폼이 <form> 태그 안에 있지 않으면
					그 내용은 서버에 전달되지 않음
					
				***
				참고 ]
				
					이 때 반드시 이 폼의 내용을 전달할 도구를 준비함
					이 도구를 우리는 제출(submit)도구라고 함
					
					제출 도구 만드는 방법
					1. html 형식으로 만드는 방법
						<input type="submit" value="적당한단어">
						==> 모양은 버튼 모양으로 나오지만
							이 버튼을 클릭하면 이 버튼을 감싸고 있는
							<form> 태그 내의 입력 폼에 입력한 내용이 서버에 제출
							
					2. 자바스크립트 형식으로 만드는 방법
					
						<script type="text/javascript">
							var frm = 폼태그를 선택;
							frm.submit();
						</script>
						
					<form> 태그 작성형식
					
						<form method="POST" action="요청문서" name="???" id="???">
							필요한 입력폼을 제작
						</form>
					
					<form> 태그의 중요 속성
						method : 폼의 데이터를 서버에게 보내는 방법
								GET, POST 중 선택해서 기입하면 됨
						action : 서버가 받아서 처리할 문서
						
				참고 ]
				
					POST 방식은 스트림을 이용해서 서버에게 전달하게 되므로
					주소표시줄에 그 내용이 나오지 않게 됨
					따라서 GET 방식보다는 보안에 유리함
					
				참고 ]
				
					POST 방식으로 주는 데이터의 한글 깨짐 방지 방법
					서버가 필터링을 이용해서 인코딩 해줘야 함
					
					방법 ]
						
						web.xml 파일의
						
						1. 필터를 만들기
						
					    <filter>
					        <filter-name>setCharacterEncodingFilter</filter-name>
					        ==> 이 부분은 필터 처리에 적당한 이름을 부여한 것
					        <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
					        ==> 필터 처리에 사용할 클래스를 지정하는 부분
					        <init-param>
					            <param-name>encoding</param-name>
					            <param-value>UTF-8</param-value>
					        </init-param>
					        ==> 인코딩 방식을 지정하는 부분
					    </filter>
					    
					    이 부분을 찾아서 주석 해제
					    
					 2. 필터를 적용시키기
					 	
					 	    <filter-mapping>
						        <filter-name>setCharacterEncodingFilter</filter-name>
						        ==>  적용시킬 필터의 이름을 기입하는 부분
						        <url-pattern>/*</url-pattern>
						        ==> 어떤 요청이 있는 경우 이 필터링을 사용할지를 지정하는 부분
						        	기본 셋팅이 /* 이므로 모든 요청에 대해서 필터링 한다는 의미
						    </filter-mapping>
						    
						이 부분을 주석 해제
						
				참고 ]
				
					<input type="text"..>
					<input type="password" ...>
					<textarea>....</textarea>
					의 3가지는 사용자가 입력한 내용이 서버에 전달
					
					하지만 위의 3가지 이외의 입력태그는 화면에 보이는 내용이 전달되는 것이 아니라
					value 속성으로 지정한 내용이 서버에 전달 됨
					따라서 입력상자 계열 이외의 폼을 제작할 경우에는
					반드시 value 속성을 정의해야 함
					
				참고 ]
				
					만약 같은 <form> 태그 안에 같은 name 속성이 여러 태그에 존재하는 경우에는
					모든 데이터가 배열 형식으로 전달 됨
					
					따라서 이 때는
						
						request.getParameterValues("키값");
					 을 이용해서 꺼내야 함
					 
				참고 ]
				
					제작한 폼이 라디오버튼이거나 선택박스인 경우에는
					선택한 태그의 value 속성값만 서버에 전달 됨
					
					특히 체크박스의 경우 선택, 취소로 서버에 전달 되는것으로 착각하기 쉬운데
					그렇게 작동하는 것이 아니고
					선택된 태그의 value 속성값만 전달 됨
							
	3. response 객체
	==> 서버가 클라이언트에게 응답하는 정보를 관리하는 내장객체
	
		HttpServletResponse라는 클래스를 이용해서 만들어진 내장객체
		
		주요 함수 ]
			
			sendRedirect()
			==> 서버측에서 강제로 클라이언트의 요청을 변경하는 명령
				즉, 클라이언트는 a라는 문서를 요청했는데
				서버측에서 강제로 b라는 문서로 응답하는 방법
				
				예를 들어 게시판 글 등록 작업을 요청한 경우
				이 때 글 등록 작업이 끝나면 글 등록 작업에 대한 응답을 하는 것이 아니고
				강제로 목록 보여주기를 응답하는 것이 일반적
				
				이처럼 서버는 가끔 필요하면
				클라이언트의 요청(위의 글 등록에 해당)을
				서버가 다른 요청(목록보기요청)으로 바꿔야하는 경우가 발생
				
		참고 ]
		
			서버가 요청을 바꾸는 방법
			
				1. redirect
					==> 원래 클라이언트의 요청정보는 모두 잊고
						완벽하게 새로운 요청으로 처리하는 방법
						(request 객체가 새롭게 생성)
				
						따라서 원래 클라이언트가 준 정보는 사라진 상태가 됨
						
						새로 고침을 하면 마지막 요청(서버가 바꾼 요청)부터 시작함
						
				2. forward
					==> 원래 클라이언트의 요청 정보를 유지한 상태에서
						화면에 보이는 문서만 바꿔치기하는 기법으로 처리
						
						따라서 원래 클라이언트가 준 정보는 기억하고 있는 상태가 됨
						(request 객체가 유지)
						
						새로고침을 하면 처음부터 다시 시작하게 됨
						즉, 클라이언트가 실제 요청한 요청부터 다시 시작
	
	*					
	4. session 객체
		==> 세션을 관리하는 내장객체
		
			HttpSession이라는 클래스를 이용해서 만들어진 내장객체
			
	5. application 객체
		==> 서버 전체를 관리하는 내장객체
		
			ServletContext라는 클래스를 이용해서 만들어진 내장객체
			
	6. page 객체
		==> 그 문서 자체를 관리하는 내장객체
		
			PageContext라는 클래스를 이용해서 만들어진 내장객체
